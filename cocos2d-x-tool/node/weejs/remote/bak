/**
 * @Author: wbsifan
 * @Date:   2017-05-03T09:43:00+08:00
 * @Email:  29500196@qq.com
 * @Last modified by:   wbsifan
 * @Last modified time: 20-Jun-2017
 */

const wee = require("weejs");
const RedisClient = require("ioredis");
const debug = require("debug")("wee:remote");
const ip = require("ip");

const REMOTE_PREFIX = "#remote#";
const MAX_EVENTID = 16000000;


var createList = {};
class Remote {
    constructor(config, nsp = "/") {
        this.remoteId = [nsp, ip.address(), process.pid].join("/");
        this.nsp = nsp;
        this.channel = `${REMOTE_PREFIX}:${this.nsp}`;
        this.selfChannel = `${REMOTE_PREFIX}:${this.remoteId}`;
        this.pubRedis = config.pubRedis || new RedisClient(config);
        this.subRedis = config.subRedis || new RedisClient(config);
        this.events = {};
        this.eventId = 0;
        this.subRedis.on("message", (channel, packet) => {
            if (this.channel == channel || this.selfChannel == channel) {
                this._onMessage(packet);
            }
        });
        this.subRedis.subscribe([this.channel, this.selfChannel], async(err, count) => {
            if (err) {
                throw Error(err);
            }
            debug("Start subscribe on:", [this.channel, this.selfChannel], count);
            await this.pubRedis.sadd(this.channel, this.remoteId);
        });
        wee.onExit(async(done) => {
            debug("End subscribe at:", this.channel);
            await this.pubRedis.srem(this.channel, this.remoteId);
            done();
        });
    }

    /**
     * [create description]
     * @param  {[type]} config
     * @return {Remote}
     */
    static create(config, nsp = "/") {
        if (!createList[nsp]) {
            createList[nsp] = new this(config, nsp);
        }
        return createList[nsp];
    }


    /**
     * 切换命名空间
     * @param  {String} [nsp="/"]
     * @return {[type]}
     */
    use(nsp = "/") {
        return Remote.create({ pubRedis: this.pubRedis, subRedis: this.subRedis }, nsp);
    }

    /**
     * 移除监听事件
     * @param  {[type]} name
     * @return {[type]}
     */
    remove(name) {
        delete this.events[name];
    }

    /**
     * 监听事件
     * @param  {[type]} name
     * @param  {Function} cb
     * @return {[type]}
     */
    on(name, cb) {
        this.events[name] = cb;
    }


    /**
     * 向所有检听者发送消息
     * @param  {[type]} name
     * @param  {[type]} cmd
     * @param  {[type]} data
     * @return {Promise}
     */
    async emit(name, ...data) {
        var channel = this.channel;
        await this._publish(channel, name, ...data);
    }

    /**
     * 向指定nsp发送消息
     * @param  {[type]} nsp
     * @param  {[type]} name
     * @param  {[type]} data
     * @return {Promise}
     */
    async emitTo(nsp, name, ...data) {
        var channel = `${REMOTE_PREFIX}:${nsp}`;
        await this._publish(channel, name, ...data);
    };

    /**
     * 获取子空间列表
     * @param  {[type]} nsp
     * @return {Promise}
     */
    async getChildList(nsp = null) {
        if (nsp) {
            var rkey = `${REMOTE_PREFIX}:${nsp}`;
        } else {
            var rkey = this.channel;
        }
        var ret = await this.pubRedis.smembers(rkey);
        return ret;
    }

    /**
     * 随机获取一个子空间
     * @param  {[type]} nsp
     * @return {Promise}
     */
    async getChildRand(nsp = null) {
        if (nsp) {
            var rkey = `${REMOTE_PREFIX}:${nsp}`;
        } else {
            var rkey = this.channel;
        }
        var ret = await this.pubRedis.srandmember(rkey);
        return ret;
    }


    async _publish(channel, name, ...data) {
        this.eventId++;
        if (this.eventId > MAX_EVENTID) {
            this.eventId = 1;
        }
        var packet = {
            id: this.eventId,
            from: this.remoteId,
            name: name,
            data: data
        };
        debug("publish:", channel, wee.jsonEncode(packet));
        await this.pubRedis.publish(channel, wee.jsonEncode(packet));
    }

    /**
     * 收到消息
     * @param  {[type]} packet
     * @return {[type]}
     */
    _onMessage(packet) {
        debug("onMessage @", this.channel, packet);
        packet = wee.jsonDecode(packet);
        if (!packet) {
            wee.error("packet_data_error");
            return;
        }
        var { name, data } = packet;
        var cb = this.events[name];
        if (cb) {
            // var fn = (name, ...data) => {
            //     var channel = `${REMOTE_PREFIX}:${packet.from}`;
            //     this._publish(channel, name, ...data);
            // }
            // cb(...data, fn);
            cb(...data);
        }
    }
}

module.exports = Remote;
