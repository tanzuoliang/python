var shimmer = require('../../../util/shimmer.js');
var logger = require('../../../util/logger.js').child('parsers.wrappers.amqplib.callback_api');
var recorder = require('../../../metrics/recorders/mq.js')('RabbitMQ');
var util = require('../../../util/util.js');
var fmt = require('util').format;
var rabbit = require('./rabbitmq');

module.exports = function initialize(agent, amqp) {
    if (!amqp) {
        return logger.verbose("amqp does not exists.");
    }

    shimmer.wrapMethodOnce(amqp, 'amqp', 'connect', function(connect) {
        return function() {
            return connect.apply(this, arguments).then(function(channel) {
                return channel && wrapChannel(channel);
            }, function(error) {
                return error;
            });
        };
    });

    function wrapChannel(channel) {
        channel.connection && channel.connection.on('error', rabbit.handler(agent));

        shimmer.wrapMethod(channel, 'ChannelModel.prototype', 'createChannel', createChannel);
        shimmer.wrapMethod(channel, 'ChannelModel.prototype', 'createConfirmChannel', createChannel);

        function createChannel(createChannel, channelType) {
            return function() {
                return createChannel.apply(this, arguments).then(function(channel) {
                    return rabbit.wrap(channel, channelType, agent);
                }, function(error) {
                    return error;
                });
            };
        }

        return channel;
    }
};